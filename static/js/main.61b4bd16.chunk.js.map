{"version":3,"sources":["Counter/Counter.js","Swan/Swan.js","Explainer/Explainer.js","App.js","index.js"],"names":["Counter","react_default","a","createElement","className","this","props","count","PureComponent","Swan","style","left","top","zIndex","src","type","alt","customStyles","content","right","bottom","marginRight","transform","maxWidth","Explainer","lib_default","isOpen","contentLabel","href","target","BLACK_SWAN_OCCURRENCE_RATIO","MIN_TIME_TRAVEL_DELAY","SWAN_IMAGE_WIDTH","SWAN_IMAGE_HEIGHT","EMPTY_HEADER_HEIGHT","guid","s4","Math","floor","random","toString","substring","App","state","swans","currentTimeTravelTimeout","hasFoundBlackSwan","handleKeyboardEvents","event","keyCode","_this","spawnNewSwan","timeTravel","swanType","randomPositionTop","window","innerHeight","randomPositionLeft","innerWidth","newSwan","id","setState","prevState","concat","Object","toConsumableArray","setTimeout","document","addEventListener","_this2","onClick","src_Counter_Counter","map","swan","src_Swan_Swan","assign","key","src_Explainer_Explainer","ReactDOM","render","src_App_0","getElementById"],"mappings":"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","file":"static/js/main.61b4bd16.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport './Counter.css';\n\nclass Counter extends PureComponent {\n\n  render() {\n    return (\n      <div className=\"Counter\">\n        <h1>{this.props.count} swans</h1>\n        <h2>Click on your mouse or press SPACE to add swans, until you find a black one!</h2>\n        <h3>You can also press the T key, which will start time-travel mode, automatically adding swans until a black one is found.</h3>\n      </div>\n    )\n  }\n}\n\nexport default Counter\n","import React, { PureComponent } from 'react';\nimport './Swan.css';\n\nclass Swan extends PureComponent {\n\n  render() {\n    return (\n      <div className=\"Swan\" style={{ left: this.props.left, top: this.props.top, zIndex: this.props.zIndex }}>\n        <img src={this.props.type + '-swan.png'} alt={this.props.type + ' swan'} />\n      </div>\n    )\n  }\n}\n\nexport default Swan\n","import React, { PureComponent } from 'react';\nimport Modal from 'react-modal';\nimport './Explainer.css';\n\nconst customStyles = {\n  content: {\n    top                   : '50%',\n    left                  : '50%',\n    right                 : 'auto',\n    bottom                : 'auto',\n    marginRight           : '-50%',\n    transform             : 'translate(-50%, -50%)',\n    maxWidth              : '600px'\n  }\n}\n\nclass Explainer extends PureComponent {\n\n  render() {\n    return (\n      <Modal\n        isOpen={this.props.isOpen}\n        style={customStyles}\n        contentLabel=\"Explanation\"\n      >\n        <div className=\"Explainer\">\n          <h2>You've found a black swan!</h2>\n\n          <p>With this visualisation, we've tried to show you the <u>problem of induction</u>. Now, you could have seen <b>{this.props.count - 1} swans</b>, stopped and determined that since all the swans you had seen so far were white, all swans must be white.</p>\n          \n          <p>However, this would have been a logical mistake, since the <b>{this.props.count}th swan</b> you saw was black. There are actually black swans in the wild, there are just significantly less of them than there are white swans.</p>\n\n          <p>You can read more about the problem of induction here: <a href=\"https://en.wikipedia.org/wiki/Problem_of_induction\" target=\"_blank\">https://en.wikipedia.org/wiki/Problem_of_induction</a>.</p>\n\n          <small>Note: in this visualisation, the chance of finding a black swan is 1/200th, which is not based on actual population data of black versus white swans in the world.</small>\n        </div>\n      </Modal>\n    )\n  }\n}\n\nexport default Explainer;","import React, { PureComponent } from 'react';\nimport './App.css';\n\nimport Counter from './Counter/Counter'\nimport Swan from './Swan/Swan'\nimport Explainer from './Explainer/Explainer'\n\nconst BLACK_SWAN_OCCURRENCE_RATIO = 0.005 // 1 out of 200 swans are black\n\nconst MIN_TIME_TRAVEL_DELAY = 5 // Minimum delay between spawning swans during time travel mode, in ms\n\nconst SWAN_IMAGE_WIDTH = 100\nconst SWAN_IMAGE_HEIGHT = 60\n\nconst EMPTY_HEADER_HEIGHT = 180\n\nfunction guid() {\n  function s4() {\n    return Math.floor((1 + Math.random()) * 0x10000)\n      .toString(16)\n      .substring(1);\n  }\n  return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n}\n\nclass App extends PureComponent {\n\n  state = {\n    swans: [],\n    count: 0,\n    currentTimeTravelTimeout: 200,\n    hasFoundBlackSwan: false\n  }\n\n  componentDidMount() {\n    document.addEventListener('keydown', this.handleKeyboardEvents, false)\n  }\n\n  handleKeyboardEvents = (event) => {\n    if (event.keyCode === 32) {\n      // SPACE bar\n      this.spawnNewSwan()\n    } else if (event.keyCode === 84) {\n      // T key\n      this.timeTravel()\n    }\n  }\n\n  spawnNewSwan = () => {\n    if (!this.state.hasFoundBlackSwan) {\n      const swanType = Math.random() <= BLACK_SWAN_OCCURRENCE_RATIO ? 'black' : 'white'\n\n      const randomPositionTop = EMPTY_HEADER_HEIGHT + Math.floor(Math.random() * (window.innerHeight - SWAN_IMAGE_HEIGHT - EMPTY_HEADER_HEIGHT))\n      const randomPositionLeft = Math.floor(Math.random() * (window.innerWidth - SWAN_IMAGE_WIDTH))\n\n      const newSwan = {\n        id: guid(),\n        type: swanType,\n        top: randomPositionTop,\n        left: randomPositionLeft,\n        zIndex: this.state.count + 5 // Minimum z-index is 5 to ensure the swans are above background elements\n      }\n\n      this.setState(prevState => ({\n        swans: [...prevState.swans, newSwan],\n        count: this.state.count + 1,\n        hasFoundBlackSwan: swanType === 'black'\n      }))\n    }\n  }\n\n  timeTravel = () => {\n    if (!this.state.hasFoundBlackSwan) {\n      this.spawnNewSwan()\n      setTimeout(() => {\n        // Start by spawning every second, and slowly decrease the timeout, until it spawns 20 swans per second\n        if (this.state.currentTimeTravelTimeout > MIN_TIME_TRAVEL_DELAY) this.setState({ currentTimeTravelTimeout: this.state.currentTimeTravelTimeout - MIN_TIME_TRAVEL_DELAY })\n\n        this.timeTravel()\n      }, this.state.currentTimeTravelTimeout)\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\" onClick={() => this.spawnNewSwan()}>\n        <Counter count={this.state.count} />\n\n        {this.state.swans.map((swan) =>\n          <Swan key={swan.id} {...swan} />\n        )}\n\n        <Explainer isOpen={this.state.hasFoundBlackSwan} count={this.state.count} />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}